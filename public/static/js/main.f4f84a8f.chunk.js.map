{"version":3,"sources":["api/SelectService.js","components/SimpleSelect.jsx","components/SkillSelect.jsx","App.js","serviceWorker.js","index.js"],"names":["SelectService","index","params","axios","get","model","then","response","Promise","resolve","data","SimpleSelect","props","customLabel","label","optionLabel","setDefaultValue","options","state","defaultValue","loading","this","selectData","map","value","optionValue","setState","name","placeholder","onSelect","isSearchable","tip","Fragment","style","display","className","required","isClearable","onChange","option","styles","menuList","provided","_state","maxHeight","React","Component","defaultProps","_options","_data","defaultSelectData","select","SkillSelect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAYA,IAIeA,EAJO,CAClBC,MAXJ,SAAeC,GACX,OAAOC,IAAMC,IAAI,WAAY,CAACF,OAAQ,CAClCG,MAAOH,EAAOG,SACdC,MAAK,SAAAC,GACL,OAAO,IAAIC,SAAQ,SAAAC,GACfA,EAAQF,EAASG,cCMRC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAwBRC,YAAc,SAAAH,GACZ,IAAMI,EAAQ,EAAKF,MAAMG,YAEzB,MAAqB,kBAAVD,EACFJ,EAAK,EAAKE,MAAMG,aAGlBD,EAAMJ,IAhCI,EAmCnBM,gBAAkB,WAAO,IACfC,EAAY,EAAKC,MAAjBD,QACR,OAAO,EAAKL,MAAMO,aAAaF,IAlC/B,EAAKC,MAAQ,CACXD,QAAS,GACTG,SAAS,GALM,E,gEASE,IAAD,OAClBpB,EAAcC,MACZoB,KAAKT,MAAMU,YACXhB,MAAK,SAAAC,GACL,IAAMU,EAAUV,EAASU,QAAQM,KAAI,SAAAb,GACnC,MAAO,CACLI,MAAO,EAAKD,YAAYH,GACxBc,MAAOd,EAAK,EAAKE,MAAMa,aACvBf,KAAMA,MAIV,EAAKgB,SAAS,CAAET,UAASG,SAAS,S,+BAoBpC,GAAIC,KAAKH,MAAME,QAAS,OAAO,KADxB,MAG2DC,KAAKT,MAA/DE,EAHD,EAGCA,MAAOa,EAHR,EAGQA,KAAMC,EAHd,EAGcA,YAAaC,EAH3B,EAG2BA,SAAeC,GAH1C,EAGqCC,IAHrC,EAG0CD,cAEjD,OACE,kBAAC,IAAME,SAAP,KACE,yBAAKC,MAAO,CAAEC,QAAS,SACrB,2BAAOC,UAAWd,KAAKT,MAAMwB,UAAY,YAAatB,IAExD,kBAAC,IAAD,CACEa,KAAMA,EACNC,YAAaA,EACbX,QAASI,KAAKH,MAAMD,QACpBa,aAAcA,EACdO,aAAW,EACXlB,aAAcE,KAAKL,kBACnBsB,SAAU,SAAAC,GAAM,OAAIV,EAASzB,IAAImC,EAAQ,OAAQ,MACjDC,OAAQ,CACNC,SAAU,SAACC,EAAUC,GAAX,sBACLD,EADK,CAERE,UAAW,mB,GA9DiBC,IAAMC,WAuEhDnC,EAAaoC,aAAe,CAC1BjC,MAAO,SACPC,YAAa,OACbU,YAAa,KACbG,YAAa,YACbD,KAAM,gBACNL,WAAY,GACZH,aAAc,SAAA6B,GAAQ,OAAI,MAC1BnB,SAAU,SAAAoB,KACVnB,cAAc,GCzFhB,IAAMoB,EAAoB,CACxB7C,MAAO,QACP8C,OAAQ,CAAC,KAAM,SAGXC,EAAc,SAAAxC,GAAK,OACvB,kBAAC,EAAD,eACEU,WAAU,eAAO4B,EAAP,GAA6BtC,EAAMsC,mBAC7CpC,MAAOF,EAAME,MACbc,YAAa,YACbD,KAAM,gBACFf,KAIOwC,IAEfA,EAAYL,aAAe,CACzBjC,MAAO,UClBT,IAUeuC,EAVH,WACV,OACE,yBAAKlB,UAAU,OACb,2CACA,uDACA,kBAAC,EAAD,CAAarB,MAAM,YCGLwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f4f84a8f.chunk.js","sourcesContent":["import axios from 'axios';\n\nfunction index(params) {\n    return axios.get('/selects', {params: {\n        model: params.model\n    }}).then(response => {\n        return new Promise(resolve => {\n            resolve(response.data)\n        })\n    })\n}\n\nconst SelectService = {\n    index\n}\n\nexport default SelectService","import React from 'react';\nimport Select from 'react-select';\nimport get from 'lodash/get';\n\nimport SelectService from '../api/SelectService'\n\n// This component should only be used if you know your\n// data options are roughly between 0-100. After that, this\n// component gets pretty rough since it takes a long time to\n// render client side.\n\n// If you know you have options > 100, you should use the\n// SearchableSelect component instead\nexport default class SimpleSelect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    SelectService.index(\n      this.props.selectData\n    ).then(response => {\n      const options = response.options.map(data => {\n        return {\n          label: this.customLabel(data),\n          value: data[this.props.optionValue],\n          data: data\n        };\n      });\n\n      this.setState({ options, loading: false });\n    });\n  }\n\n  customLabel = data => {\n    const label = this.props.optionLabel;\n    // The options are either string or function\n    if (typeof label === 'string') {\n      return data[this.props.optionLabel];\n    }\n\n    return label(data);\n  };\n\n  setDefaultValue = () => {\n    const { options } = this.state;\n    return this.props.defaultValue(options);\n  };\n\n  render() {\n    if (this.state.loading) return null;\n\n    const { label, name, placeholder, onSelect, tip, isSearchable } = this.props;\n\n    return (\n      <React.Fragment>\n        <div style={{ display: 'flex' }}>\n          <label className={this.props.required && \"required\"}>{label}</label>\n        </div>\n        <Select\n          name={name}\n          placeholder={placeholder}\n          options={this.state.options}\n          isSearchable={isSearchable}\n          isClearable\n          defaultValue={this.setDefaultValue()}\n          onChange={option => onSelect(get(option, 'data', {}))}\n          styles={{\n            menuList: (provided, _state) => ({\n              ...provided,\n              maxHeight: '125px'\n            })\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nSimpleSelect.defaultProps = {\n  label: 'Select',\n  optionLabel: 'name',\n  optionValue: 'id',\n  placeholder: 'Select...',\n  name: 'simple_select',\n  selectData: {},\n  defaultValue: _options => null,\n  onSelect: _data => { },\n  isSearchable: false\n};","import React from 'react';\n\nimport SimpleSelect from './SimpleSelect';\n\nconst defaultSelectData = {\n  model: 'Skill',\n  select: ['id', 'name']\n};\n\nconst SkillSelect = props => (\n  <SimpleSelect\n    selectData={{ ...defaultSelectData, ...props.defaultSelectData }}\n    label={props.label}\n    placeholder={'Select...'}\n    name={'skill_select'}\n    {...props}\n  />\n);\n\nexport default SkillSelect;\n\nSkillSelect.defaultProps = {\n  label: 'Skills'\n};","import React from 'react';\nimport './App.css';\nimport SkillSelect from './components/SkillSelect'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>hello world</h1>\n      <h2>DnD Character Dashboard</h2>\n      <SkillSelect label=\"skill\" />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}